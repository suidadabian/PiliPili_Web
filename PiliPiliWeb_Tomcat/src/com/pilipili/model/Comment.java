package com.pilipili.model;

import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import com.google.gson.stream.JsonWriter;
import com.pilipili.model.base.BaseComment;

import java.io.IOException;
import java.io.StringReader;
import java.util.Date;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Comment extends BaseComment<Comment> {
    public static final String ID = "id";
    public static final String USER_ID = "userId";
    public static final String INFO_PICTURE_ID = "infoPictureId";
    public static final String COMMENT = "comment";
    public static final String DATE = "date";
    public static final String REPLY_NUM = "replyNum";

    public static final Comment dao = new Comment().dao();

    public static JsonWriter toJson(Comment comment, JsonWriter jsonWriter) throws IOException {
        if (comment == null || jsonWriter == null) {
            return jsonWriter;
        }

        return jsonWriter.beginObject()
                .name("id").value(comment.getId())
                .name("userId").value(comment.getUserId())
                .name("infoPictureId").value(comment.getInfoPictureId())
                .name("comment").value(comment.getComment())
                .name("date").value(comment.getDate().getTime())
                .name("replyNum").value(comment.getReplyNum())
                .endObject();
    }

    public static Comment fromJson(String json) throws IOException {
        if (json == null) {
            return null;
        }

        Comment comment = new Comment();
        JsonReader jsonReader = new JsonReader(new StringReader(json));

        jsonReader.beginObject();
        while (jsonReader.hasNext()) {
            switch (jsonReader.nextName()) {
                case ID: {
                    comment.setId(jsonReader.nextLong());
                    break;
                }
                case USER_ID: {
                    comment.setUserId(jsonReader.nextLong());
                    break;
                }
                case INFO_PICTURE_ID: {
                    comment.setInfoPictureId(jsonReader.nextLong());
                    break;
                }
                case COMMENT: {
                    comment.setComment(jsonReader.nextString());
                    break;
                }
                case DATE: {
                    if (jsonReader.peek() == JsonToken.NULL) {
                        jsonReader.nextNull();
                        comment.setDate(null);
                    } else {
                        comment.setDate(new Date(jsonReader.nextLong()));
                    }
                    break;
                }
                case REPLY_NUM: {
                    comment.setReplyNum(jsonReader.nextInt());
                    break;
                }
                default: {
                    jsonReader.skipValue();
                    break;
                }
            }
        }
        jsonReader.endObject();
        jsonReader.close();

        return comment;
    }
}
