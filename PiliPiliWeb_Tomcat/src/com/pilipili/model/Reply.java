package com.pilipili.model;

import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import com.google.gson.stream.JsonWriter;
import com.pilipili.model.base.BaseReply;

import java.io.IOException;
import java.io.StringReader;
import java.util.Date;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Reply extends BaseReply<Reply> {
    public static final String ID = "id";
    public static final String USER_ID = "userId";
    public static final String COMMENT_ID = "commentId";
    public static final String REPLY = "reply";
    public static final String DATE = "date";

    public static final Reply dao = new Reply().dao();

    public static JsonWriter toJson(Reply reply, JsonWriter jsonWriter) throws IOException {
        if (reply == null || jsonWriter == null) {
            return jsonWriter;
        }

        return jsonWriter.beginObject()
                .name(ID).value(reply.getId())
                .name(USER_ID).value(reply.getUserId())
                .name(COMMENT_ID).value(reply.getCommentId())
                .name(REPLY).value(reply.getReply())
                .name(DATE).value(reply.getDate().getTime())
                .endObject();
    }

    public static Reply fromJson(String json) throws IOException {
        if (json == null) {
            return null;
        }

        Reply reply = new Reply();
        JsonReader jsonReader = new JsonReader(new StringReader(json));

        jsonReader.beginObject();
        while (jsonReader.hasNext()) {
            switch (jsonReader.nextName()) {
                case ID: {
                    reply.setId(jsonReader.nextLong());
                    break;
                }
                case USER_ID: {
                    reply.setUserId(jsonReader.nextLong());
                    break;
                }
                case COMMENT_ID: {
                    reply.setCommentId(jsonReader.nextLong());
                    break;
                }
                case REPLY: {
                    reply.setReply(jsonReader.nextString());
                    break;
                }
                case DATE: {
                    if (jsonReader.peek() == JsonToken.NULL) {
                        jsonReader.nextNull();
                        reply.setDate(null);
                    } else {
                        reply.setDate(new Date(jsonReader.nextLong()));
                    }
                    break;
                }
                default: {
                    jsonReader.skipValue();
                    break;
                }
            }
        }
        jsonReader.endObject();
        jsonReader.close();

        return reply;
    }
}
